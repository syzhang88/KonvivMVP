<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Konviv MVP</title>
        <link rel="stylesheet" type="text/css" href="style.css">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
        @import url('https://fonts.googleapis.com/css?family=Open+Sans');

        body {
         font-family: 'Open Sans', sans-serif;
           background-image: url('https://github.com/Konviv/konviv.github.io/blob/master/img/white.jpg?raw=true');
           background-position: center;
           /* Set a specific height */
           height: 500px;

           /* Create the parallax scrolling effect */
           background-attachment: fixed;
           background-position: center;
           background-repeat: no-repeat;
           background-size: cover;
        }
        #navigation-footer {
             border-top:1px solid #EEE;
             position:fixed;
             top:605px;
             right:0;
             left:0;
             z-index:99;
             }

        </style>
    </head>
    <body>

    <div id="navigation-top" style="background-color:white;">
              <div id="menu">
                  <div class="box">
                             <div class="nubox">
          <p><a href="index.ejs"><button class="upbutton">Main</button></a></p>
          <p><a href="bills.ejs"><button class="upbutton">Bills</button></a></p>
          <p><a href="savings.ejs"><button class="upbutton">Savings</button></a></p>
        </div>
        <div class="nubox">
          <div id="left-to-spend">loading</div>
          <div id="string" style="font-size:16px; padding-top:5px; color:#61cb43;">Left to Spend</div>
        </div>
        <div class="nubox">
          <p><a href="savings.ejs"><button class="upbutton">Logout</button></a></p>
          <p><a href="newsfeed.ejs"><button class="upbutton">Newsfeed</button></a></p>
          <p><a href="settings.ejs"><button class="upbutton">Settings</button></a></p>
        </div>
                  </div>
              </div>
            </div>
      <div id="navigation-footer" style="background-color:white;">
              <div id="menu">
                  <div class="box">
                    <button class="headerbutton" id="get-accounts-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon1.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br />
                    <p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Accounts</p></button>
                    <button class="headerbutton" id="get-transactions-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon2.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Transactions</p></button>
                    <button class="headerbutton" id="get-link-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon3.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Edit Bank</p></button>
                    <button class="logout-btn headerbutton"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon4.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Insights</p></button>
                  </div>
              </div>
            </div>

        <div class ="box" style="margin-bottom:200px;">
            <div class="head">
                <h1> Monthly Fixed Bills</h1>
            </div>
            <div class = "body">
                <div id = "monthly-fixed-bills">
                    <div class = "bucket-heading" id = "total-bills">
                        loading
                    </div>
                    <div class="wrap-bills">
                        <div class="circle-bills" id="Housing">
                            <div class="perc-bills">
                                <div class="perc-value-bills"></div>
                            </div>
                            <span class="top-bills">Housing</span>
                            <span class="bottom-bills"></span>
                        </div>

                        <div class="circle-bills" id="Loans">
                            <div class="perc-bills">
                                <div class="perc-value-bills"></div>
                            </div>
                            <span class="top-bills">Loans</span>
                            <span class="bottom-bills"></span>
                        </div>
                        <div class="circle-bills" id="Insurance">
                            <div class="perc-bills">
                                <div class="perc-value-bills"></div>
                            </div>
                            <span class="top-bills">Insurance</span>
                            <span class="bottom-bills"></span>
                        </div>
                        <div class="circle-bills" id="Subscriptions">
                            <div class="perc-bills">
                                <div class="perc-value-bills"></div>
                            </div>
                            <span class="top-bills">Subscriptions</span>
                            <span class="bottom-bills"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
        <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
        <script src="https://www.gstatic.com/firebasejs/4.1.4/firebase.js"></script>

        <script>
            $(document).ready(function() {
                var defaultTimePeriod = 6;
                var textDisplay = '';
                var plaidHandler = Plaid.create({
                    apiVersion: 'v2',
                    clientName: 'Konviv MVP',
                    env: 'development',
                    product: ['transactions'],
                    key: '9f4ef21fdb37b5c0e3f80290db7716',
                    onSuccess: function(public_token) {
                        // alert('calling /get_access_token...')
                        $.post('/get_access_token', {
                            token: sessionStorage.getItem("token"),
                            publicToken: public_token,
                            userId: sessionStorage.getItem("userId")
                        }, function() {
                            location.href="index.ejs";
                        });
                    }
                });
                var firebaseConfig = {
                    apiKey: "AIzaSyASB9RhrUzNme-rGkVrzEXmF3nL7PwMgvQ",
                    authDomain: "konvivandroid.firebaseapp.com",
                    databaseURL: "https://konvivandroid.firebaseio.com",
                    projectId: "konvivandroid",
                    storageBucket: "konvivandroid.appspot.com",
                    messagingSenderId: "41760220514"
                };

                firebase.initializeApp(firebaseConfig);
                checkLoginStatus();
                savingsCall(defaultTimePeriod);

                function checkLoginStatus() {
                    console.log("refresh check");
                    firebase.auth().onAuthStateChanged(function(user) {
                        if (!user){
                            sessionStorage.clear();
                            location.href="/";
                        }
                    });
                }

                function checkTokenStatus(success) {
                    if (success) {
                        user.getIdToken(true).then(function(token) {
                            sessionStorage.setItem('firebaseAccessToken', token);
                        })
                    } else {
                        firebase.auth().signOut();
                        sessionStorage.clear();
                        location.href="/";
                    }
                }

                function logOutSuccess(logout) {
                    if (logout == true) {
                        location.href='/';
                        console.log('currently logged out');
                    } else {
                        console.log('unable to log out');
                        console.log('token: ' + sessionStorage.getItem('token'));
                    }
                };

                // Bucket Functionalities START here...
                function openBucketPage(bucketPage) {
                    console.log(bucketPage);
                    return function () {
                        console.log(bucketPage);
                        sessionStorage.setItem('bucketPage', bucketPage);
                        location.href = '/bucketpage.ejs';
                    }
                }
                //  Bucket Functionalities END here...

                // RESTful calls to index.js server using post function
                function savingsCall(timePeriod) {
                    $.post('/savings', {
                        token: sessionStorage.getItem('token'),
                        months: timePeriod
                    }, function(data) {
                        // Catching error
                        if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                            // Render the error

                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                            // Using for loop to pull information for each bucket from data
                        } else {
                            console.log(data)
                            var bucket = data;
                            var fillPercent = 0;

                            checkTokenStatus(true);
                            // Accounting for divide-by-zero error
                            if (bucket['Total'] > 0) {
                                fillPercent = 100 - (bucket['Savings']/bucket['Total'])*100
                            }
                            bucketSavings = Math.round(bucket['Savings']*100)/100;
                            bucketTotal = Math.round(bucket['Total']*100)/100;
                            newPercent = fillPercent;

                            $("[id='savings-account']")
                                .find(".top-savings").text("Savings Account").end()
                                .find(".bottom-savings").text("$" + bucketSavings + " of $" + bucketTotal).end()
                                .find(".perc-value-savings").css("height", newPercent + "%")

                            $('[class="monthNumber"]').text("emergency savings goal for " + timePeriod + " months of living expenses (set below)");
                            // document.getElementById('Savings Account').setAttribute("onclick", "location.href='bucketpage.ejs'");
                        }
                    });
                }

                $.post('/bucket_names', {
                    token: sessionStorage.getItem('token')
                }, function(data) {
                    if (data.error != null) {
                        if (data.message == 'Failed to authenticate token.') {
                            checkTokenStatus(false);
                        }
                        // Format the error
                        var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                        // Using for loo
                    } else {
                        checkTokenStatus(true);
                        for (var key in data) {
                            var selector = '[id="' + key + '"]';
                            $(selector).find('.top-bills,.top').text(data[key]['name']).end();
                            sessionStorage.setItem(key, data[key]['name']);
                        }
                    }
                });

                $.post('/buckets', {
                    token: sessionStorage.getItem('token')
                }, function(data) {
                    // Catching error

                    if (data.error != null) {
                        if (data.message == 'Failed to authenticate token.') {
                            checkTokenStatus(false);
                        }
                        // Format the error
                        var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                        // Using for loop to pull information for each bucket from data
                    } else {
                        console.log(data)
                        var totalEstimatedBills = 0;
                        var totalEstimatedSpending = 0;
                        var totalActualBills = 0;
                        var totalActualSpending = 0;
                        var totalBalance = 0;

                        checkTokenStatus(true);
                        bucketMoney = data['bucketMoney']
                        for (var bucketClass in bucketMoney) {
                            totalAmount = 0;
                            for (var key in bucketMoney[bucketClass]) {
                                if (bucketMoney[bucketClass].hasOwnProperty(key)) {
                                    var bucket = bucketMoney[bucketClass][key];
                                    var fillPercent = 0;

                                    // Accounting for divide-by-zero error
                                    if (bucket['Total'] > 0) {
                                        fillPercent = (bucket['Spending']/bucket['Total'])*100
                                    }

                                    bucketSpent = Math.round((bucket['Total'] - bucket['Spending'])*100)/100;
                                    bucketTotal = Math.round(bucket['Total']*100)/100;
                                    newPercent = fillPercent;

                                    var selector = '[id="' + key + '"]';

                                    $(selector)
                                        // .find(".top-bills,.top").text(key).end()
                                        .find(".bottom-bills,.bottom").text("$" + bucketSpent + " of $" + bucketTotal).end()
                                        .find(".perc-value-bills,.perc-value").css("height", newPercent + "%")
                                    $(selector)
                                        .on('click', openBucketPage(key));

                                    if (newPercent > 75){
                                        console.log('low bucket found: ' + newPercent)
                                        $(selector)
                                            .find(".bottom-bills,.bottom")
                                            .css("border", "1px solid red")
                                            .css("background-color", "red")
                                    }

                                    /*edit: bucketTotal*/
                                    totalAmount += bucketSpent;
                                    if (bucketClass == 'Fixed Buckets'){
                                        totalEstimatedBills += bucketMoney[bucketClass][key]['Total'];
                                        totalActualBills += bucketMoney[bucketClass][key]['Spending'];
                                    } else if (bucketClass == 'Spending Buckets'){
                                        totalEstimatedSpending += bucketMoney[bucketClass][key]['Total'];
                                        totalActualSpending += bucketMoney[bucketClass][key]['Spending'];
                                    }
                                }
                            }
                        }

                        /* INCOME CLASS */
                        var totalIncome = -(bucketMoney['Income Buckets']['Income']['Spending']);
                        $("#monthly-income").text("$" + totalIncome.toFixed(2));
                        $("#monthly-income").on('click', openBucketPage('Income'));

                        /* TOTAL BALANCE */
                        for (account in data['accounts']) {
                            if (data['accounts'][account]['type'] == 'depository') {
                                totalBalance += data['accounts'][account]['balances']['current'];
                            }
                        }

                        var totalActual = totalActualBills + totalActualSpending;
                        var totalBills = Math.max(totalEstimatedBills, totalActualBills);
                        var totalSpending = Math.max(totalEstimatedSpending, totalActualSpending);
                        var amountLeft = totalBalance - totalBills - totalSpending + totalActualBills + totalActualSpending;

                        $("#left-to-spend").text("$" + amountLeft.toFixed(2));
                        $("#total-bills").text("Total Bills: $" + totalActualBills.toFixed(2) + " | Estimated Bills: $" + totalEstimatedBills.toFixed(2));
                        $("#total-spending").text("Total Spending: $" + totalActualSpending.toFixed(2)  + " | Estimated Spending: $" + totalEstimatedSpending.toFixed(2));
                        $("#overall-stats").text("+ $" + totalIncome.toFixed(2)  + " income | - $" + totalActual.toFixed(2) + " costs");
                    }
               });

               $('#threeMonths').on('click', function(e) {
                   savingsCall(3);
               });

               $('#sixMonths').on('click', function(e) {
                   savingsCall(6);
               });

               $('#nineMonths').on('click', function(e) {
                   savingsCall(9);
               });

               $('#twelveMonths').on('click', function(e) {
                   savingsCall(12);
               });

               $('#get-link-btn').on('click', function(e) {
                   plaidHandler.open()
               });

               $('.logout-btn').on('click', function(e) {
                   firebase.auth().signOut();
                //    alert("logging out");
                   sessionStorage.clear();
                   location.href='/';
                });

                $('#get-accounts-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "account") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    console.log('accounts called...')

                    $.post('/accounts', {
                        token: sessionStorage.getItem('token')
                    }, function(data) {
                        if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            console.log("Account info: " + data)
                            textDisplay = "account";
                            $('#get-button-data').slideUp(function() {
                                var html = '<div class="inner">';
                                // html += '<p><b>BASIC INFORMATION ABOUT YOUR BANK ACCOUNT<b></p> <br>';
                                html += '<p><strong>Bank Account: </strong> ' + data.institution.name + '</p>';
                                html += '<p>Billed products: ' + data.item.billed_products.join(', ') + '</p>';
                                html += '<p>Available products: ' + data.item.available_products.join(', ') + '</p>';
                                html += '<br>';
                                data.accounts.forEach(function(account, idx) {
                                    // html += '<div class="inner">';
                                    html += '<strong>' + account.name +
                                    ' $' + (account.balances.current) + '</strong><br>';
                                    html += account.subtype + ' ' + account.mask;
                                    // html += '</div>';
                                    html += '<br>';
                                });
                                html += '</div>';

                                $(this).html(html).slideDown();
                            });
                        }
                    });
                });

                // $('#get-item-btn').on('click', function(e) {
                //     if ($('#get-button-data').is(':visible') && textDisplay == "item") {
                //         textDisplay = "";
                //         return $('#get-button-data').slideUp();
                //     }
                //     $.post('/item', {
                //         token: sessionStorage.getItem('token')
                //     }, function(data) {
                //         textDisplay = "item";
                //         $('#get-button-data').slideUp(function() {
                //             if (data.error) {
                //                 $(this).html('<p>' + data.error + '</p>').slideDown();
                //             } else {
                //                 var html = '<div class="inner">';
                //                 // html += '<p><b>BASIC INFORMATION ABOUT YOUR BANK ACCOUNT<b></p> <br>';
                //                 html += '<p><b>Bank Account</b> ' + data.institution.name + '</p>';
                //                 // html += '<p>Billed products: ' + data.item.billed_products.join(', ') + '</p>';
                //                 // html += '<p>Available products: ' + data.item.available_products.join(', ') + '</p>';
                //                 html += '</div>';
                //                 $(this).html(html).slideDown();
                //             }
                //         });
                //     });
                // });

                $('#get-transactions-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "transactions") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    $.post('/transactions', {
                        token: sessionStorage.getItem('token')
                    }, function(data) {
                        textDisplay = "transactions";
                        if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            $('#get-button-data').slideUp(function() {
                                var html = '';
                                data.transactions.forEach(function(txn, idx) {
                                    //code for displaying category for each transaction
                                    html += '<div class="inner">';
                                    html += '<strong>' + txn.name + '</strong><br>';
                                    html += '<em>' + txn.bucket + '</em><br>';
                                    html += '$' + txn.amount + '<br>';
                                    html += '<em>' + txn.date + '</em>';
                                    html += '</div>';
                                });
                                $(this).slideUp(function() {
                                    $(this).html(html).slideDown();
                                });
                            });
                        }
                    });
                });
            });
        </script>
    </body>
</html>
