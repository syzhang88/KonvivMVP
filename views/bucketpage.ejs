<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <meta name="description" content="">
        <meta name="author" content="">

        <title>Konviv App</title>

        <!-- Latest compiled and minified CSS -->
        <link rel="stylesheet" type="text/css" href="style.css">
        <link href="https://fonts.googleapis.com/css?family=Montserrat" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://fonts.googleapis.com/css?family=Varela+Round" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css?family=Archivo:400,500,600,700" rel="stylesheet">

    </head>
    <style>
          #myModal {
              background-color:rgba(0, 0, 0, 0.4);
          }
          .modal-content {
            margin-top:50px;
            display:block;
            z-index:999;
            background-color:white;
          }
          #myTodal {
              background-color:rgba(0, 0, 0, 0.4);
          }
          .todal-content {
            margin-top:50px;
            display:block;
            z-index:999;
            background-color:white;
            border-radius: 4px;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
          }
          .inner {
            text-align:center;
          }
          .click-transaction {
             border-top:1px solid #DDD;
             padding:10px 10px 20px 10px;
          }
          .btn-block {
                width:190px;
                float:left;
                margin:10px;
                font-size:16px;
          }
          .left {
            margin-left:55px;
          }
    </style>
    <body>
        <div class ="box">


            <p><a class="back" href="/index.ejs">< Back</a></p> <br><br>

            <!-- <div class="head">
                <h1 id= "pageTitle" style="font-size:35px;"> </h1>
            </div> -->

            <div class="head">
                <h1 id= "pageTitle"> </h1>
            </div>
            <br />

            <div class="template">
            <button id="myBtn" class="btn btn-secondary btn-block btn-large">Edit Bucket Name</button>
                <!-- <input id="editSizeBucket" placeholder="New Bucket for Amount" /> -->
                <button id="myBtn2" class="btn btn-secondary btn-block btn-large">Edit Bucket Size</button>
                <br/>
                <!-- <input id="moveTransactionName" placeholder="Transaction to Move" />
                <br/>
                <input id="moveTransactionBucket" placeholder="New Bucket to Move Transaction" />
                <button id="btnMove" class="btn btn-secondary btn-block btn-large">Move Transaction</button>
                <br/> -->
            </div>
            <br />
            <br />
            <br />
            <br />
            <!-- The Modal -->
            <div id="myModal" class="modal">

          <!-- Modal content -->
          <div class="modal-content">
            <span class="close" style="margin-top:-5px;">&times;</span>
            <p>What is the new bucket called?</p><br />
            <hr style="border:1px solid #DDD;" />
              <input id="editName" pattern="[a-zA-Z]{15}" title="A name must be composed of only letters and less than 15 characters." placeholder="New Bucket Name"/>
                <button id="btnName" class="btn btn-secondary btn-block btn-large left">Submit New Name</button>
          </div>

            </div>
          <!-- End Modal -->

          <!-- The Modal2 -->
            <div id="myTodal" class="modal">

          <!-- Modal content -->
          <div class="todal-content">
            <span class="close2" style="margin-top:-5px;">&times;</span>
            <p>How much should I add or subtract?</p><br />
            <hr style="border:1px solid #DDD;" />
              <input id="editSizeAmount" pattern="[-0-9]" title="Value must be either a negative or positive number!" placeholder="Bucket Amount to Add or Subtract" />
              <button id="btnSize" class="btn btn-secondary btn-block btn-large left">Submit</button>
          </div>

            </div>
          <!-- End Modal -->

            <div class="head" id="transactions" style="cursor:pointer">
                   <h1 style="font-size:18px; font-weight:300;"> Transactions <h1>
           </div>
           <div id="get-button-data"></div>
        </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.1.4/firebase.js"></script>

    <!-- Modal script -->
    <script>
          // Get the modal
      var modal = document.getElementById('myModal');
      // Get the button that opens the modal
      var btn = document.getElementById("myBtn");
      // Get the <span> element that closes the modal
      var span = document.getElementsByClassName("close")[0];
      // When the user clicks on the button, open the modal
      btn.onclick = function() {
          modal.style.display = "block";
      }
      // When the user clicks on <span> (x), close the modal
      span.onclick = function() {
          modal.style.display = "none";
      }
      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function(event) {
          if (event.target == modal) {
              modal.style.display = "none";
          }
      }
    </script>

      <!-- Modal script -->
    <script>
          // Get the modal
      var todal = document.getElementById('myTodal');
      // Get the button that opens the modal
      var btn = document.getElementById("myBtn2");
      // Get the <span> element that closes the modal
      var span = document.getElementsByClassName("close2")[0];
      // When the user clicks on the button, open the modal
      btn.onclick = function() {
          todal.style.display = "block";
      }
      // When the user clicks on <span> (x), close the modal
      span.onclick = function() {
          todal.style.display = "none";
      }
      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function(event) {
          if (event.target == todal) {
              todal.style.display = "none";
          }
      }
    </script>

    <script>
        $(document).ready(function() {
            // Initialize Firebase
            var firebaseConfig = {
                apiKey: "AIzaSyASB9RhrUzNme-rGkVrzEXmF3nL7PwMgvQ",
                authDomain: "konvivandroid.firebaseapp.com",
                databaseURL: "https://konvivandroid.firebaseio.com",
                projectId: "konvivandroid",
                storageBucket: "konvivandroid.appspot.com",
                messagingSenderId: "41760220514"
            };

            firebase.initializeApp(firebaseConfig);
            checkLoginStatus();
            get_details();
            getBucketName(sessionStorage.getItem("bucketPage"));

            var trans_id
            var full_date
            var date

            $("[id='btnName']").on("click", rename_bucket);
            $("[id='btnSize']").on("click", change_size);
            $("[id='transactions']").on("click", get_details);

            function getBucketName(name) {
                // console.log(sessionStorage.getItem("bucketPage"));
                $.post("/get_bucket_name", {
                    name: sessionStorage.getItem("bucketPage"),
                    firebaseToken: sessionStorage.getItem("firebaseToken")
                }, function(data) {
                    // console.log(data);

                    if (data.error != null) {
                        if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                            checkTokenStatus(false);
                        }
                        return "{Name Code Error}"
                        // Using for loop to pull information for each bucket from data
                    } else {
                        checkTokenStatus(true);
                        // return data;
                        console.log("check " + data);
                        $("[id='pageTitle']").text("Edit "  + data + " Bucket").end();
                    }
                });
            }
            // console.log(getBucketName(sessionStorage.getItem("bucketPage")));

            function showMoveOption(){

                console.log("CHOOSE BUCKET")
                console.log(this.id)
                console.log(this.dataset.date)
                trans_id=this.id
                full_date= this.dataset.date

                //Keep only the year and month from the date
                date=full_date.slice(0,7)                    // removing the last two characters from full_date
                console.log(date)

                $("[class=move-option]").slideUp();
                $("[id=" + this.id + "move-option]").slideUp(function() {
                    var html = '';
                    html += '<input type="name-text" name="bucket-name" pattern="[a-zA-Z]{15}" title="Must be a bucket name!" class="bucketName" placeholder="Bucket to move the transaction to">';
                    html += '<button class="moveTrans btn btn-secondary btn-block btn-large">Move Transaction</button>';
                    $(this).html(html).slideDown();
                });
            }

            $(document).on('click', '.moveTrans', moveTransaction);
            function moveTransaction(){
                //console.log(trans_id)
                console.log("moving call...")
                console.log($('input[name="bucket-name"]').val());
                if ($('input[name="bucket-name"]').val() != null) {
                    $.post('/move_transaction',{
                        from_bucket:sessionStorage.getItem("bucketPage"),
                        to_bucket:$('input[name="bucket-name"]').val(),
                        transaction_id:trans_id,
                        year_month:date,
                        firebaseToken: sessionStorage.getItem("firebaseToken")
                    }, callResult);
                }
            }

            function checkLoginStatus() {
                console.log("refresh check");
                firebase.auth().onAuthStateChanged(function(user) {
                    if (user) {
                        console.log(user);
                        checkTokenStatus(true)
                    } else {
                        sessionStorage.clear();
                        location.href="/";
                    }
                });
            }

            function checkTokenStatus(success) {
                if (success) {
                    firebase.auth().onAuthStateChanged(function(user) {
                        if (user) {
                            user.getIdToken(true).then(function(token) {
                                sessionStorage.setItem('firebaseToken', token);
                            });
                        } else {
                            sessionStorage.clear();
                            location.href="/";
                        }
                    });
                } else {
                    firebase.auth().signOut();
                    sessionStorage.clear();
                    location.href="/";
                }
            }

            function moveBucketPopUp() {
                alert("Modal should show up here");
            };

            function get_details() {
                // console.log("grabbing transactions...");
                $.post('/transactions_for_bucket',{
                    which_bucket: sessionStorage.getItem("bucketPage"),
                    firebaseToken: sessionStorage.getItem("firebaseToken")

                }, function(data) {
                    if (data == null) {
                        var errorHtml = '<div class="inner"><strong> No transactions this month yet! </strong><br>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                    } else if (data.error != null) {
                        if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                            checkTokenStatus(false);
                        }
                        // Format the error
                        var errorHtml = '<div class="inner"><p>' +
                        '<strong>' + data.error.error_code + ':</strong> ' +
                        data.error.error_message + '</p></div>';
                        if (data.error.error_code === 'PRODUCT_NOT_READY') {
                            // Add additional context for `PRODUCT_NOT_READY` errors
                            errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                            'error is returned when a request to retrieve Transaction data ' +
                            'is made before Plaid finishes the <a href="https://plaid.com/' +
                            'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                            'transaction pull.</a></p></div>';
                        }
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                    } else {
                        checkTokenStatus(true);
                        $('#get-button-data').slideUp(function() {
                            var html = '';
                            for (var month in data){
                                html += '<div class="inner">';
                                html += '<strong>' + month + '</strong><br>';
                                for (var txnId in data[month]) {
                                    // console.log(txnId)
                                    if(data[month].hasOwnProperty(txnId)){
                                        txn = data[month][txnId];
                                        // html += '<div id=' + txnId + ' data-date=' + txn.date+ ' class="click-transaction" style="cursor:pointer" onclick=""><br>';
                                        html += '<div id=' + txnId + ' data-date=' + txn.date + ' class="click-transaction"><br>';
                                        html += '<strong>' + txn.name + '</strong><br>';
                                        html += '$' + txn.amount + '<br>';
                                        html += '<em>' + txn.date + '</em><br>';
                                        html += '</div>';
                                        // html += '<div id=' + txnId + 'move-option class=move-option></div>';
                                    }
                                }
                                html += '</div>';
                                $(this).slideUp(function() {
                                    $(this).html(html).slideDown();
                                    var allTxns = document.getElementsByClassName("click-transaction")
                                    for (var txn in allTxns) {
                                        // allTxns[txn].onclick = showMoveOption;
                                        // txn.addEventListener("click", moveBucketPopUp, false);
                                    }
                                });
                            }
                        });
                    };
                });
            };

            function rename_bucket(){
                //modal.style.display = "block";
                if (editName.value===''){
                    $('[id=get-button-data]').text("Enter a Valid Bucket Name");
                } else{
                    $.post('/rename_bucket',{
                        which_bucket:sessionStorage.getItem("bucketPage"),
                        new_name:editName.value,
                        firebaseToken: sessionStorage.getItem("firebaseToken")
                    }, callResult);
                }
            }

            function change_size(){
                // if (sessionStorage.getItem("bucketPage")===editSizeBucket.value){
                //     console.log("Cannot Change Size of Same Bucket!!")
                // }
                // else{
                console.log("changing size...");
                console.log(sessionStorage.getItem("bucketPage"));
                console.log("changing size...");

                    $.post('/change_bucket_size',{
                        amount:editSizeAmount.value,
                        from_bucket:sessionStorage.getItem("bucketPage"),
                        // to_bucket:editSizeBucket.value,
                        firebaseToken: sessionStorage.getItem("firebaseToken")
                    }, callResult);
                // }
            }

            function callResult(data) {
                console.log('callResult');
                console.log(data);

                if (data.error != null) {
                    console.log(data.error);
                    if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                        checkTokenStatus(false);
                    }
                    // Format the error
                    var errorHtml = '<div class="inner"><p><strong>' + data.message + '</strong></p></div>';
                    // Render the error
                    $('#get-button-data').slideUp(function() {
                        $(this).slideUp(function() {
                            $(this).html(errorHtml).slideDown();
                        });
                    });
                    $('html, body').animate({ scrollTop: 0 }, 'fast');
                    // Using for loop to pull information for each bucket from data
                } else {
                    checkTokenStatus(true);
                    var successHtml = '<div class="inner"><p><strong> Edit Success! Refresh to see changes </strong></p></div>';
                    // Render the error

                    $('#get-button-data').slideUp(function() {
                        $(this).slideUp(function() {
                            $(this).html(successHtml).slideDown();
                        });
                    });
                }
            };

            // btnName.addEventListener('click', e => {
            //     var errorCode = null;
            //     var errorMsg = null;
            //
            //     //Sign up
            //     $(function () {
            //
            //     });
            // });
         });
     </script>

     <style>
        /*body.showSignUpModal {overflow: hidden;}
        .modalMask {display: none;}
        body.showSignUpModal .modalMask {display: block; position: fixed; left: 0; top: 0; right: 0; bottom: 0; z-index: 9997; background-color: rgba(0,0,0,0.75);}
        body.showSignUpModal .modalMask .signUpModal {text-align: center; position: fixed; left: 50%; top: 50%; transform: translate(-50%,-50%); background-color: #fff; padding-bottom: 25px; box-shadow: 0 0 10px #fff; border-radius: 5px; z-index: 9998; min-height: 150px;}
        input:focus { box-shadow: inset 0 -5px 45px rgba(100,100,100,0.4), 0 1px 1px rgb
        margin: 40px auto;
        text-align: justify;
        text-justify: inter-word;
        }*/
      </style>
</body>
</html>
