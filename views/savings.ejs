<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Konviv MVP</title>
        <link rel="stylesheet" type="text/css" href="style.css">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://fonts.googleapis.com/css?family=Varela+Round" rel="stylesheet">
        <link href="https://fonts.googleapis.com/css?family=Archivo:400,500,600,700" rel="stylesheet">


        <style>
        .wrap-savings {
            margin:0px;
        }
        #navigation-top {
          position:relative;
          z-index:99;
          background-color:white;
          margin-bottom:-15px;
          }

          #sticky {
                width:100%;
                padding:10px;
                padding-bottom:4px;
                background:black;
                color:white;
                font-weight:bold;
                font-size:18px;
                position:fixed;    /*Here's what sticks it*/
                bottom:0;          /*to the bottom of the body*/
                left:0;            /*and to the left of the body.*/
                z-index:9999;
                text-align:center; /*this will center the containers*/
              }

          #sticky * {
                margin:0;
                padding:0;
              }

           #sticky .container {
                display:inline-block; /*required for centering containers and allowing wrap*/
                margin-bottom:16px;
                width:20%; /*relative unit for responsive design*/
                min-width:150px; /*containers won't get smaller than 200px*/
                vertical-align:top;
              }

          #myModal {
              background-color:black;
              opacity:0.9;
          }
          .modal-content {
            display:block;
            z-index:999;
            background-color:white;
          }
        </style>
    </head>
   <body style="height:800px;">
        <div id="navigation-top">
            <div id="top-menu" style="position:fixed;">
                        <p><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/logopin.png?raw=true" style="height:45px; margin-top:-2px; float:left;"><button class="smbutton" div id="myBtn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/notificationsw.png?raw=true" style="opacity:0.3; height:28px;"></button> <a href="newsfeed.ejs"><button class="smbutton"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/newsw.png?raw=true" style="height:28px;"></button></a> <button class="smbutton" id="logout-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/logoutw.png?raw=true" style="height:28px;"></button> </p>
            </div>
             <div style="position:fixed; margin-top:41px; background-color:white; width:100%;">
                        <p><a href="bills.ejs"><button class="upbutton">Bills</button></a> <a href="index.ejs"><button class="upbutton active">Main</button></a> <a href="savings.ejs"><button class="upbutton">Savings</button></a></p>
             </div>
            </div>


        <!-- <div id="low-bucket-alert"></div> -->

        <div id="sticky" style="background-color:white; border-top:1px solid #DDD;">
            <div id="menu">
                <div class="box">
                    <button class="headerbutton" id="get-accounts-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon1.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:75px;"><br />
                    <p class="bottombtn">Accounts</p></button>
                    <button class="headerbutton" id="get-transactions-btn"><img id="myBtn2" src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon2.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:75px;"><br /><p class="bottombtn"">Transactions</p></button>
                    <button class="headerbutton" id="get-link-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon3.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:75px;"><br /><p class="bottombtn"">Edit Bank</p></button>
                    <button class="headerbutton" id="get-insights-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon4.jpg?raw=true" alt="Insights" desc="Insights" style="width:75px;"><br /><p class="bottombtn">Insights</p></button>
                </div>
            </div>
        </div>

         <div class ="box" style="margin-top:95px;">
         <div style="text-align:center;" id="get-button-data"></div>
            <div class="head">
                <h1> Emergency Savings Goal </h1>
            </div>
            <div class = "body">

                <div id = "savings-account">
                    <div class="wrap-savings">
                        <div class="circle-savings" id="Emergency Savings">
                            <div class="perc-savings">
                                <div class="perc-value-savings"></div>
                            </div>
                            <span class="top-savings"></span>
                            <span class="bottom-savings"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class = "monthNumber" id="string"><h4>This is how much you should be saving</h4></div>
        </div>

        <div id="menu" style="margin-top:-50px;">
            <div class="box">
                <button class="savingsbutton" id="threeMonths">3 Months</button>
                <button class="savingsbutton" id="sixMonths">6 Months</button>
                <button class="savingsbutton" id="nineMonths">9 Months</button>
                <button class="savingsbutton" id="twelveMonths">12 Months</button>
            </div>
        </div>
<br /><br /><br />
<!--
        <div id="modal">
        <div class="modalconent">
        <h2 style="font-size:20px;">How do buckets work?</h2><br />
        <p style="font-size:14px;">The top number <b>$139</b> is how much money you have left to spend in that category</p><br />
        <p><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/sbucket.jpg?raw=true" style="width:200px;" /></p><br />
        <p style="font-size:14px;">The bottom number <b>$199</b> represents your total budget for this bucket for the month</p><br />
        <p style="font-size:12px; color:#999;">We calculated your budget for this bucket by looking at how much you typically spend in this category in a month, and averaging your last six months of transactions.</p><br />
        <button id="button" style="padding:10px 30px; font-size:14px; margin-left:80px;">Close</button>
        </div>
        </div>
       -->

      <!-- scripts -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
        <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
        <script src="https://www.gstatic.com/firebasejs/4.1.4/firebase.js"></script>

       <!-- Modal script -->
        <script>
              // Get the modal
          var modal = document.getElementById('myModal');
          // Get the button that opens the modal
          var btn = document.getElementById("myBtn");
          // Get the <span> element that closes the modal
          var span = document.getElementsByClassName("close")[0];
          // When the user clicks on the button, open the modal
          btn.onclick = function() {
              modal.style.display = "block";
          }
          // When the user clicks on <span> (x), close the modal
          span.onclick = function() {
              modal.style.display = "none";
          }
          // When the user clicks anywhere outside of the modal, close it
          window.onclick = function(event) {
              if (event.target == modal) {
                  modal.style.display = "none";
              }
          }
        </script>

        <script>
            $(document).ready(function() {
                var plaidEnv = '';
                var plaidKey = '';
                var plaidHandler = null;
                $.get('/plaid_info', function(data) {
                    // console.log('plaidKey');
                    //
                    // console.log(data);
                    plaidEnv = data.env;
                    plaidKey = data.key;
                    plaidHandler = Plaid.create({
                        apiVersion: 'v2',
                        clientName: 'Konviv MVP',
                        env: plaidEnv,
                        product: ['transactions'],
                        key: plaidKey,
                        onSuccess: function(public_token) {
                            // alert('calling /get_access_token...')
                            $.post('/get_access_token', {
                                firebaseToken: sessionStorage.getItem("firebaseToken"),
                                publicToken: public_token,
                                userId: sessionStorage.getItem("userId")
                            }, function() {
                                location.href="index.ejs";
                            });
                        }
                    });
                });
                var defaultTimePeriod = 6;
                var textDisplay = '';
                var firebaseConfig = {
                    apiKey: "AIzaSyASB9RhrUzNme-rGkVrzEXmF3nL7PwMgvQ",
                    authDomain: "konvivandroid.firebaseapp.com",
                    databaseURL: "https://konvivandroid.firebaseio.com",
                    projectId: "konvivandroid",
                    storageBucket: "konvivandroid.appspot.com",
                    messagingSenderId: "41760220514"
                };
                firebase.initializeApp(firebaseConfig);
                checkLoginStatus();
                savingsCall(defaultTimePeriod);
                function checkLoginStatus() {
                    console.log("refresh check");
                    firebase.auth().onAuthStateChanged(function(user) {
                        if (!user){
                            sessionStorage.clear();
                            location.href="/";
                        }
                    });
                }
                function checkTokenStatus(success) {
                    console.log('verifying user token...')
                    if (success) {
                        firebase.auth().onAuthStateChanged(function(user) {
                            if (user) {
                                user.getIdToken(true).then(function(token) {
                                    sessionStorage.setItem('firebaseToken', token);
                                });
                            } else {
                                sessionStorage.clear();
                                location.href="/";
                            }
                        });
                    } else {
                        firebase.auth().signOut();
                        sessionStorage.clear();
                        location.href="/";
                    }
                }
                function logOutSuccess(logout) {
                    if (logout == true) {
                        location.href='/';
                        console.log('currently logged out');
                    } else {
                        console.log('unable to log out');
                        // console.log('token: ' + sessionStorage.getItem('firebaseToken'));
                    }
                };
                // Bucket Functionalities START here...
                function openBucketPage(bucketPage) {
                    console.log(bucketPage);
                    return function () {
                        console.log(bucketPage);
                        sessionStorage.setItem('bucketPage', bucketPage);
                        location.href = '/bucketpage.ejs';
                    }
                }
                //  Bucket Functionalities END here...
                // RESTful calls to index.js server using post function
                function savingsCall(timePeriod) {
                    $.post('/savings', {
                        firebaseToken: sessionStorage.getItem('firebaseToken'),
                        months: timePeriod
                    }, function(data) {
                        // Catching error
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                            // Using for loop to pull information for each bucket from data
                        } else {
                            console.log('savings goal called...')
                            console.log(data)
                            var bucket = data;
                            var fillPercent = 0;
                            checkTokenStatus(true);
                            // Accounting for divide-by-zero error
                            if (bucket['Total'] > 0) {
                                fillPercent = 100 - (bucket['Savings']/bucket['Total'])*100
                            }
                            bucketSavings = Math.round(bucket['Savings']*100)/100;
                            bucketTotal = Math.round(bucket['Total']*100)/100;
                            newPercent = fillPercent;
                            $("[id='savings-account']")
                                .find(".top-savings").text("Savings Account").end()
                                .find(".bottom-savings").text("$" + bucketSavings + " of $" + bucketTotal).end()
                                .find(".perc-value-savings").css("height", newPercent + "%")
                            $('[class="monthNumber"]').text("emergency savings goal for " + timePeriod + " months of living expenses (set below)");
                            // document.getElementById('Savings Account').setAttribute("onclick", "location.href='bucketpage.ejs'");
                        }
                    });
                }
                $.post('/buckets', {
                    firebaseToken: sessionStorage.getItem('firebaseToken')
                }, function(data) {
                    // alert('bug check');
                    // console.log(data);
                    // Catching errors
                    if (data == null) {
                        var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                    } else if (data.error != null) {
                        // alert('bug check #2');
                        if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                            checkTokenStatus(false);
                        }
                        // Format the error
                        var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                        // Using for loop to pull information for each bucket from data
                    } else {
                        console.log(data)
                        var totalEstimatedBills = 0;
                        var totalEstimatedSpending = 0;
                        var totalActualBills = 0;
                        var totalActualSpending = 0;
                        var totalBalance = 0;
                        checkTokenStatus(true);
                        bucketMoney = data['bucketMoney']
                        for (var bucketClass in bucketMoney) {
                            totalAmount = 0;
                            for (var key in bucketMoney[bucketClass]) {
                                if (bucketMoney[bucketClass].hasOwnProperty(key)) {
                                    var bucket = bucketMoney[bucketClass][key];
                                    var fillPercent = 0;
                                    // Accounting for divide-by-zero error
                                    if (bucket['Total'] > 0) {
                                        fillPercent = (bucket['Spending']/bucket['Total'])*100
                                    }
                                    bucketSpent = Math.round((bucket['Total'] - bucket['Spending'])*100)/100;
                                    bucketTotal = Math.round(bucket['Total']*100)/100;
                                    newPercent = fillPercent;
                                    var selector = '[id="' + key + '"]';
                                    $(selector)
                                        // .find(".top-bills,.top").text(key).end()
                                        .find(".bottom-bills,.bottom").text("$" + bucketSpent + " of $" + bucketTotal).end()
                                        .find(".perc-value-bills,.perc-value").css("height", newPercent + "%")
                                    $(selector)
                                        .on('click', openBucketPage(key));
                                    if (newPercent > 75){
                                        console.log('low bucket found: ' + newPercent)
                                        $(selector)
                                            .find(".perc-bills,.perc")
                                            .css("border", "1px solid red")
                                            .css("background-color", "red")
                                    }
                                    /*edit: bucketTotal*/
                                    totalAmount += bucketSpent;
                                    if (bucketClass == 'Fixed Buckets'){
                                        totalEstimatedBills += bucketMoney[bucketClass][key]['Total'];
                                        totalActualBills += bucketMoney[bucketClass][key]['Spending'];
                                    } else if (bucketClass == 'Spending Buckets'){
                                        totalEstimatedSpending += bucketMoney[bucketClass][key]['Total'];
                                        totalActualSpending += bucketMoney[bucketClass][key]['Spending'];
                                    }
                                }
                            }
                        }
                        /* INCOME CLASS */
                        var totalIncome = -(bucketMoney['Income Buckets']['Income']['Spending']);
                        $("#monthly-income").text("$" + totalIncome.toFixed(2));
                        $("#monthly-income").on('click', openBucketPage('Income'));
                        /* TOTAL BALANCE */
                        var totalBalance = data['totalBalance'];
                        var totalActual = totalActualBills + totalActualSpending;
                        var totalBills = Math.max(totalEstimatedBills, totalActualBills);
                        var totalSpending = Math.max(totalEstimatedSpending, totalActualSpending);
                        var amountLeft = totalBalance - totalBills - totalSpending + totalActualBills + totalActualSpending;
                        // Default savings goal is six months
                        $("#sixMonths").addClass("savingsActive");
                        $("#left-to-spend").text("$" + amountLeft.toFixed(2));
                        $("#total-bills").text("Total Bills: $" + totalActualBills.toFixed(2) + " | Estimated Bills: $" + totalEstimatedBills.toFixed(2));
                        $("#total-spending").text("Total Spending: $" + totalActualSpending.toFixed(2)  + " | Estimated Spending: $" + totalEstimatedSpending.toFixed(2));
                        $("#overall-stats").text("+ $" + totalIncome.toFixed(2)  + " income | - $" + totalActual.toFixed(2) + " costs");
                    }
               });
               $('#threeMonths').on('click', function(e) {
                   savingsCall(3);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#threeMonths').addClass("savingsActive");
               });
               $('#sixMonths').on('click', function(e) {
                   savingsCall(6);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#sixMonths').addClass("savingsActive");
               });
               $('#nineMonths').on('click', function(e) {
                   savingsCall(9);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#nineMonths').addClass("savingsActive");
               });
               $('#twelveMonths').on('click', function(e) {
                   savingsCall(12);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#twelveMonths').addClass("savingsActive");
               });
               $('#get-link-btn').on('click', function(e) {
                   plaidHandler.open();
               });
               $('#logout-btn').on('click', function(e) {
                   firebase.auth().signOut();
                //    alert("logging out");
                   sessionStorage.clear();
                   location.href='/';
                });
                $('#get-accounts-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "account") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    console.log('accounts called...')
                    $.post('/accounts', {
                        firebaseToken: sessionStorage.getItem('firebaseToken')
                    }, function(data) {
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            console.log("Account info: " + data)
                            textDisplay = "account";
                            $('#get-button-data').slideUp(function() {
                                var html = '<div class="inner">';
                                // html += '<p><b>BASIC INFORMATION ABOUT YOUR BANK ACCOUNT<b></p> <br>';
                                html += '<p><strong>Bank Account: </strong> ' + data.institution.name + '</p>';
                                html += '<p>Billed products: ' + data.item.billed_products.join(', ') + '</p>';
                                html += '<p>Available products: ' + data.item.available_products.join(', ') + '</p>';
                                html += '<br>';
                                data.accounts.forEach(function(account, idx) {
                                    // html += '<div class="inner">';
                                    html += '<strong>' + account.name +
                                    ' $' + (account.balances.current) + '</strong><br>';
                                    html += account.subtype + ' ' + account.mask;
                                    // html += '</div>';
                                    html += '<br>';
                                });
                                html += '</div>';
                                $(this).html(html).slideDown();
                            });
                        }
                    });
                });
                $('#get-transactions-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "transactions") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    $.post('/transactions', {
                        firebaseToken: sessionStorage.getItem('firebaseToken')
                    }, function(data) {
                        textDisplay = "transactions";
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            $('#get-button-data').slideUp(function() {
                                var html = '';
                                data.transactions.forEach(function(txn, idx) {
                                    //code for displaying category for each transaction
                                    html += '<div class="inner">';
                                    html += '<strong>' + txn.name + '</strong><br>';
                                    html += '<em>' + txn.bucket + '</em><br>';
                                    html += '$' + txn.amount + '<br>';
                                    html += '<em>' + txn.date + '</em>';
                                    html += '</div>';
                                });
                                $(this).slideUp(function() {
                                    $(this).html(html).slideDown();
                                });
                            });
                        }
                    });
                });
            });
        </script>
    </body>
</html>
