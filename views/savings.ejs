<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Konviv MVP</title>
        <link rel="stylesheet" type="text/css" href="style.css">
        <meta name="viewport" content="width=device-width, initial-scale=1">

             <!--   <script>
        window.onload = function () {
        document.getElementById('button').onclick = function () {
        document.getElementById('modal').style.display = "none"
            };
        };
        </script> -->

        <style>
        @import url('https://fonts.googleapis.com/css?family=Open+Sans');

        body {
         font-family: 'Open Sans', sans-serif;
           background-image: url('https://github.com/Konviv/konviv.github.io/blob/master/img/whitebox.jpg?raw=true');
        }
        #navigation-top {
          position:relative;
          z-index:99;
          background-color:white;
          }
          #sticky {
                width:100%;
                padding:20px;
                padding-bottom:4px;
                background:black;
                color:white;
                font-weight:bold;
                font-size:18px;
                position:fixed;    /*Here's what sticks it*/
                bottom:0;          /*to the bottom of the body*/
                left:0;            /*and to the left of the body.*/
                z-index:9999;
                text-align:center; /*this will center the containers*/
              }
         #navigation-top {
          border-bottom:1px solid #EEE;
          position:relative;
          z-index:99;
          background-color:white;
          }
        </style>
    </head>
    <body>

         <div id="navigation-top" style="background-color:white;">
            <div id="menu">
                <div class="box">
                    <div class="nubox">
                        <p><a href="index.ejs"><button class="upbutton">Main</button></a></p>
                        <p><a href="bills.ejs"><button class="upbutton">Bills</button></a></p>
                        <p><a href="savings.ejs"><button class="upbutton">Savings</button></a></p>
                    </div>
                    <div class="nubox">
                        <div id="left-to-spend">loading</div>
                        <div id="string" style="font-size:16px; padding-top:5px; color:#61cb43;">Left to Spend</div>
                    </div>
                    <div class="nubox">
                        <p><a href="/"><button class="upbutton" id="logout-btn">Logout</button></a></p>
                        <p><a href="newsfeed.ejs"><button class="upbutton">Newsfeed</button></a></p>
                        <p><a href="#"><button id="myBtn" class="upbutton">Settings</button></a></p>
                    </div>
                </div>
            </div>
        </div>
        
      <div id="sticky" style="background-color:white;">
              <div id="menu">
                  <div class="box">
                             <button class="headerbutton" id="get-accounts-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon1.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br />
                             <p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Accounts</p></button>
                             <button class="headerbutton" id="get-transactions-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon2.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Transactions</p></button>
                             <button class="headerbutton" id="get-link-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon3.jpg?raw=true" alt="Transactions" desc="Transactions" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Edit Bank</p></button>
                             <button class="headerbutton" id="get-insights-btn"><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/icon4.jpg?raw=true" alt="Insights" desc="Insights" style="width:85px;"><br /><p style="margin-top:-5px; font-size:10px; color:#222; padding-bottom:10px;">Insights</p></button>
                  </div>
              </div>
            </div>

         <div class ="box" style="margin-top:-5px;">
            <div class="head">
                <h1> Emergency Savings Goal </h1>
            </div>
            <div class = "body">
                <div id = "savings-account">
                    <div class="wrap-savings">
                        <div class="circle-savings" id="Emergency Savings">
                            <div class="perc-savings">
                                <div class="perc-value-savings"></div>
                            </div>
                            <span class="top-savings"></span>
                            <span class="bottom-savings"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class = "monthNumber" id="string"> </div>
        </div>

        <div id="menu">
            <div class="box">
                <button class="savingsbutton" style="margin:10px 10px 10px 14px; background-color:#999;" id="threeMonths"><span style="font-size:18px; color:#222;">3 Months</span></button>
                <button class="savingsbutton" style="margin:10px 10px; background-color:#999;" id="sixMonths"><span style="font-size:18px; color:#222;">6 Months</span></button>
                <button class="savingsbutton" style="margin:10px 10px; background-color:#999;" id="nineMonths"><span style="font-size:18px; color:#222;">9 Months</span></button>
                <button class="savingsbutton" style="margin:10px 10px; background-color:#999;" id="twelveMonths"><span style="font-size:18px; color:#222;">12 Months</span></button>
            </div>
        </div>
<br /><br /><br />
<!--
        <div id="modal">
        <div class="modalconent">
        <h2 style="font-size:20px;">How do buckets work?</h2><br />
        <p style="font-size:14px;">The top number <b>$139</b> is how much money you have left to spend in that category</p><br />
        <p><img src="https://github.com/Konviv/konviv.github.io/blob/master/img/sbucket.jpg?raw=true" style="width:200px;" /></p><br />
        <p style="font-size:14px;">The bottom number <b>$199</b> represents your total budget for this bucket for the month</p><br />
        <p style="font-size:12px; color:#999;">We calculated your budget for this bucket by looking at how much you typically spend in this category in a month, and averaging your last six months of transactions.</p><br />
        <button id="button" style="padding:10px 30px; font-size:14px; margin-left:80px;">Close</button>
        </div>
        </div>
       -->

      <!-- scripts -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>
        <script src="https://cdn.plaid.com/link/v2/stable/link-initialize.js"></script>
        <script src="https://www.gstatic.com/firebasejs/4.1.4/firebase.js"></script>

        <script>
            $(document).ready(function() {
                var defaultTimePeriod = 6;
                var textDisplay = '';
                var plaidHandler = Plaid.create({
                    apiVersion: 'v2',
                    clientName: 'Konviv MVP',
                    env: 'development',
                    product: ['transactions'],
                    key: '9f4ef21fdb37b5c0e3f80290db7716',
                    onSuccess: function(public_token) {
                        // alert('calling /get_access_token...')
                        $.post('/get_access_token', {
                            firebaseToken: sessionStorage.getItem("firebaseToken"),
                            publicToken: public_token,
                            userId: sessionStorage.getItem("userId")
                        }, function() {
                            location.href="index.ejs";
                        });
                    }
                });
                var firebaseConfig = {
                    apiKey: "AIzaSyASB9RhrUzNme-rGkVrzEXmF3nL7PwMgvQ",
                    authDomain: "konvivandroid.firebaseapp.com",
                    databaseURL: "https://konvivandroid.firebaseio.com",
                    projectId: "konvivandroid",
                    storageBucket: "konvivandroid.appspot.com",
                    messagingSenderId: "41760220514"
                };

                firebase.initializeApp(firebaseConfig);
                checkLoginStatus();
                savingsCall(defaultTimePeriod);

                function checkLoginStatus() {
                    console.log("refresh check");
                    firebase.auth().onAuthStateChanged(function(user) {
                        if (!user){
                            sessionStorage.clear();
                            location.href="/";
                        }
                    });
                }

                function checkTokenStatus(success) {
                    console.log('verifying user token...')

                    if (success) {
                        firebase.auth().onAuthStateChanged(function(user) {
                            user.getIdToken(true).then(function(token) {
                                sessionStorage.setItem('firebaseToken', token);
                            });
                        });
                    } else {
                        firebase.auth().signOut();
                        sessionStorage.clear();
                        location.href="/";
                    }
                }

                function logOutSuccess(logout) {
                    if (logout == true) {
                        location.href='/';
                        console.log('currently logged out');
                    } else {
                        console.log('unable to log out');
                        console.log('token: ' + sessionStorage.getItem('firebaseToken'));
                    }
                };

                // Bucket Functionalities START here...
                function openBucketPage(bucketPage) {
                    console.log(bucketPage);
                    return function () {
                        console.log(bucketPage);
                        sessionStorage.setItem('bucketPage', bucketPage);
                        location.href = '/bucketpage.ejs';
                    }
                }
                //  Bucket Functionalities END here...

                // RESTful calls to index.js server using post function
                function savingsCall(timePeriod) {
                    $.post('/savings', {
                        firebaseToken: sessionStorage.getItem('firebaseToken'),
                        months: timePeriod
                    }, function(data) {
                        // Catching error
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                            // Render the error

                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                            // Using for loop to pull information for each bucket from data
                        } else {
                            console.log('savings goal called...')
                            console.log(data)
                            var bucket = data;
                            var fillPercent = 0;

                            checkTokenStatus(true);
                            // Accounting for divide-by-zero error
                            if (bucket['Total'] > 0) {
                                fillPercent = 100 - (bucket['Savings']/bucket['Total'])*100
                            }
                            bucketSavings = Math.round(bucket['Savings']*100)/100;
                            bucketTotal = Math.round(bucket['Total']*100)/100;
                            newPercent = fillPercent;

                            $("[id='savings-account']")
                                .find(".top-savings").text("Savings Account").end()
                                .find(".bottom-savings").text("$" + bucketSavings + " of $" + bucketTotal).end()
                                .find(".perc-value-savings").css("height", newPercent + "%")

                            $('[class="monthNumber"]').text("emergency savings goal for " + timePeriod + " months of living expenses (set below)");
                            // document.getElementById('Savings Account').setAttribute("onclick", "location.href='bucketpage.ejs'");
                        }
                    });
                }

                $.post('/buckets', {
                    firebaseToken: sessionStorage.getItem('firebaseToken')
                }, function(data) {
                    // alert('bug check');
                    // console.log(data);
                    // Catching errors
                    if (data == null) {
                        var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                    } else if (data.error != null) {
                        // alert('bug check #2');

                        if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                            checkTokenStatus(false);
                        }
                        // Format the error
                        var errorHtml = '<div class="inner"><p><strong>' + data.error.message + '</strong></p></div>';
                        // Render the error
                        $('#get-button-data').slideUp(function() {
                            $(this).slideUp(function() {
                                $(this).html(errorHtml).slideDown();
                            });
                        });
                        // Using for loop to pull information for each bucket from data
                    } else {
                        console.log(data)
                        var totalEstimatedBills = 0;
                        var totalEstimatedSpending = 0;
                        var totalActualBills = 0;
                        var totalActualSpending = 0;
                        var totalBalance = 0;

                        checkTokenStatus(true);
                        bucketMoney = data['bucketMoney']
                        for (var bucketClass in bucketMoney) {
                            totalAmount = 0;
                            for (var key in bucketMoney[bucketClass]) {
                                if (bucketMoney[bucketClass].hasOwnProperty(key)) {
                                    var bucket = bucketMoney[bucketClass][key];
                                    var fillPercent = 0;

                                    // Accounting for divide-by-zero error
                                    if (bucket['Total'] > 0) {
                                        fillPercent = (bucket['Spending']/bucket['Total'])*100
                                    }

                                    bucketSpent = Math.round((bucket['Total'] - bucket['Spending'])*100)/100;
                                    bucketTotal = Math.round(bucket['Total']*100)/100;
                                    newPercent = fillPercent;

                                    var selector = '[id="' + key + '"]';

                                    $(selector)
                                        // .find(".top-bills,.top").text(key).end()
                                        .find(".bottom-bills,.bottom").text("$" + bucketSpent + " of $" + bucketTotal).end()
                                        .find(".perc-value-bills,.perc-value").css("height", newPercent + "%")
                                    $(selector)
                                        .on('click', openBucketPage(key));

                                    if (newPercent > 75){
                                        console.log('low bucket found: ' + newPercent)
                                        $(selector)
                                            .find(".perc-bills,.perc")
                                            .css("border", "1px solid red")
                                            .css("background-color", "red")
                                    }

                                    /*edit: bucketTotal*/
                                    totalAmount += bucketSpent;
                                    if (bucketClass == 'Fixed Buckets'){
                                        totalEstimatedBills += bucketMoney[bucketClass][key]['Total'];
                                        totalActualBills += bucketMoney[bucketClass][key]['Spending'];
                                    } else if (bucketClass == 'Spending Buckets'){
                                        totalEstimatedSpending += bucketMoney[bucketClass][key]['Total'];
                                        totalActualSpending += bucketMoney[bucketClass][key]['Spending'];
                                    }
                                }
                            }
                        }

                        /* INCOME CLASS */
                        var totalIncome = -(bucketMoney['Income Buckets']['Income']['Spending']);
                        $("#monthly-income").text("$" + totalIncome.toFixed(2));
                        $("#monthly-income").on('click', openBucketPage('Income'));

                        /* TOTAL BALANCE */
                        var totalBalance = data['totalBalance'];
                        var totalActual = totalActualBills + totalActualSpending;
                        var totalBills = Math.max(totalEstimatedBills, totalActualBills);
                        var totalSpending = Math.max(totalEstimatedSpending, totalActualSpending);
                        var amountLeft = totalBalance - totalBills - totalSpending + totalActualBills + totalActualSpending;

                        $("#left-to-spend").text("$" + amountLeft.toFixed(2));
                        $("#total-bills").text("Total Bills: $" + totalActualBills.toFixed(2) + " | Estimated Bills: $" + totalEstimatedBills.toFixed(2));
                        $("#total-spending").text("Total Spending: $" + totalActualSpending.toFixed(2)  + " | Estimated Spending: $" + totalEstimatedSpending.toFixed(2));
                        $("#overall-stats").text("+ $" + totalIncome.toFixed(2)  + " income | - $" + totalActual.toFixed(2) + " costs");
                    }
               });

               $('#threeMonths').on('click', function(e) {
                   savingsCall(3);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#threeMonths').addClass("savingsActive");
               });

               $('#sixMonths').on('click', function(e) {
                   savingsCall(6);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#sixMonths').addClass("savingsActive");
               });

               $('#nineMonths').on('click', function(e) {
                   savingsCall(9);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#nineMonths').addClass("savingsActive");
               });

               $('#twelveMonths').on('click', function(e) {
                   savingsCall(12);
                   $(".savingsActive").removeClass("savingsActive");
                   $('#twelveMonths').addClass("savingsActive");
               });

               $('#get-link-btn').on('click', function(e) {
                   plaidHandler.open();
               });

               $('#logout-btn').on('click', function(e) {
                   firebase.auth().signOut();
                //    alert("logging out");
                   sessionStorage.clear();
                   location.href='/';
                });

                $('#get-accounts-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "account") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    console.log('accounts called...')

                    $.post('/accounts', {
                        firebaseToken: sessionStorage.getItem('firebaseToken')
                    }, function(data) {
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            console.log("Account info: " + data)
                            textDisplay = "account";
                            $('#get-button-data').slideUp(function() {
                                var html = '<div class="inner">';
                                // html += '<p><b>BASIC INFORMATION ABOUT YOUR BANK ACCOUNT<b></p> <br>';
                                html += '<p><strong>Bank Account: </strong> ' + data.institution.name + '</p>';
                                html += '<p>Billed products: ' + data.item.billed_products.join(', ') + '</p>';
                                html += '<p>Available products: ' + data.item.available_products.join(', ') + '</p>';
                                html += '<br>';
                                data.accounts.forEach(function(account, idx) {
                                    // html += '<div class="inner">';
                                    html += '<strong>' + account.name +
                                    ' $' + (account.balances.current) + '</strong><br>';
                                    html += account.subtype + ' ' + account.mask;
                                    // html += '</div>';
                                    html += '<br>';
                                });
                                html += '</div>';

                                $(this).html(html).slideDown();
                            });
                        }
                    });
                });

                $('#get-transactions-btn').on('click', function(e) {
                    if ($('#get-button-data').is(':visible') && textDisplay == "transactions") {
                        textDisplay = "";
                        return $('#get-button-data').slideUp();
                    }
                    $.post('/transactions', {
                        firebaseToken: sessionStorage.getItem('firebaseToken')
                    }, function(data) {
                        textDisplay = "transactions";
                        if (data == null) {
                            var errorHtml = '<div class="inner"><p><strong> Could not fetch data </strong></p></div>';
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else if (data.error != null) {
                            if (data.message == 'Failed to authenticate token.' || data.message == 'Failed to find token.') {
                                checkTokenStatus(false);
                            }
                            // Format the error
                            var errorHtml = '<div class="inner"><p>' +
                            '<strong>' + data.error.error_code + ':</strong> ' +
                            data.error.error_message + '</p></div>';
                            if (data.error.error_code === 'PRODUCT_NOT_READY') {
                                // Add additional context for `PRODUCT_NOT_READY` errors
                                errorHtml += '<div class="inner"><p>The PRODUCT_NOT_READY ' +
                                'error is returned when a request to retrieve Transaction data ' +
                                'is made before Plaid finishes the <a href="https://plaid.com/' +
                                'docs/quickstart/#transaction-data-with-webhooks">initial ' +
                                'transaction pull.</a></p></div>';
                            }
                            // Render the error
                            $('#get-button-data').slideUp(function() {
                                $(this).slideUp(function() {
                                    $(this).html(errorHtml).slideDown();
                                });
                            });
                        } else {
                            checkTokenStatus(true);
                            $('#get-button-data').slideUp(function() {
                                var html = '';
                                data.transactions.forEach(function(txn, idx) {
                                    //code for displaying category for each transaction
                                    html += '<div class="inner">';
                                    html += '<strong>' + txn.name + '</strong><br>';
                                    html += '<em>' + txn.bucket + '</em><br>';
                                    html += '$' + txn.amount + '<br>';
                                    html += '<em>' + txn.date + '</em>';
                                    html += '</div>';
                                });
                                $(this).slideUp(function() {
                                    $(this).html(html).slideDown();
                                });
                            });
                        }
                    });
                });
            });
        </script>
    </body>
</html>
